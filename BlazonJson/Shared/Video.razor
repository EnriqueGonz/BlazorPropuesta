
@inject IJSRuntime JsRuntime
@inject HttpClient Http

        <div class="c-video" id="video-container">
            <div class="videoContainer">
                <video  class="video_responsive" width="100%" src="http://www.w3schools.com/html/mov_bbb.mp4" id="video">
                    <source id="videoSourceId" type="video/mp4" />
                </video>
            </div>
            <div class="controls">
                <div id="defaultBar" @onclick="updateProgressBar" class="orange-bar">
                    <div id="progressBar" class="orange-juice seek">
                    </div>
                </div>

                <div class="buttons">
                    <button @onclick="playpause" id="play-pause"></button>
                </div>
                <div class="fullscreen">
                    <button id="fullscreenbtn" @onclick="toggleFullScreen"></button>
                </div>
                <div class="time">
                    <time id="time-elapsed">00:00</time>
                    <span> / </span>
                    <time id="duration">00:00</time>
                </div>
            

                <div class="volume-controls">
                    <input @onclick="volumen" class="volume" id="volume" value="1" type="range" max="1" min="0" step="0.01">
                </div>
            </div>
            <div class="playback-animation" id="playback-animation">
                <div class="buttons">
                    <button id="play"></button>
                </div>
            </div>
        </div>
    @code {
        protected override async Task OnInitializedAsync()

        {
            await JsRuntime.InvokeVoidAsync("menu");
            await JsRuntime.InvokeVoidAsync("convertArray");
        }
        string[] m_strRenderMe = new string[] {
        "http://www.w3schools.com/html/mov_bbb.mp4",
        "http://www.w3schools.com/html/movie.mp4"
    };



        int currentVideo = 0;

        protected void ChangeVideo()
        {
            currentVideo = (currentVideo + 1) % 2;
            JsRuntime.InvokeVoidAsync("loadVideo");
        }
        async Task playpause()

        {

            await JsRuntime.InvokeAsync<String>("listener", m_strRenderMe.ToList());
            await JsRuntime.InvokeVoidAsync("tooglePP");
            await JsRuntime.InvokeVoidAsync("updateProgressBar");
            await JsRuntime.InvokeVoidAsync("animatePlayback");



        }
        async Task volumen()
        {
            await JsRuntime.InvokeVoidAsync("volumen");
        }

        async Task updateProgressBar()
        {
            await JsRuntime.InvokeVoidAsync("updateProgressBar");
        }
        async Task toggleFullScreen()
        {
            await JsRuntime.InvokeVoidAsync("toggleFullScreen");
        }


    }
